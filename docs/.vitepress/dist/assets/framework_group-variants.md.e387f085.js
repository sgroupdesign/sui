import{r as n,o as a,c as s,b as t,w as e,d as o,e as p,a as c}from"./app.3ae3239b.js";const l='{"title":"Group Variants","description":"","frontmatter":{},"headers":[{"level":2,"title":"Mobile Menu","slug":"mobile-menu"},{"level":2,"title":"Accordion","slug":"accordion"}],"relativePath":"framework/group-variants.md","lastUpdated":1629002363041}',i={},u=o("h1",null,"Group Variants",-1),r=o("p",null,[o("a",{href:"https://github.com/sgroupdesign/sui-vue/blob/main/packages/tailwind-plugins/src/group-variants/index",target:"_blank",rel:"noopener noreferrer"},[o("code",null,"@sui/tailwind-plugins/group-variants")])],-1),d=o("p",null,[p("You should hopefully be familar with the concept of "),o("a",{href:"https://tailwindcss.com/docs/configuring-variants",target:"_blank",rel:"noopener noreferrer"},"Tailwind variants"),p('. There are some special types of variants, which "group" functionality together. One of which is the '),o("code",null,"group-hover"),p(" variant.")],-1),k=o("pre",null,[o("code",null,'<div class="group border p-8">\n    <p class="text-indigo-600 group-hover:text-gray-900">New Project</p>\n    <p class="text-indigo-600 group-hover:text-gray-900">Create a new project from a variety of starting templates.</p>\n</div>\n')],-1),g=c('<p>Here, you can see hovering over the outer element actually triggers the colour of <strong>both</strong> inner elements. This is through a combination of <code>group</code> and <code>group-hover</code> classes to define the parent and child elements relationship, respectively.</p><p>Through this plugin, we can create completely new variants for grouping, quickly and easily. In your <code>tailwind.config.js</code> file:</p><div class="language-js"><pre><code>theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n        groupVariants<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string">&#39;group-parent&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                groupSelector<span class="token operator">:</span> <span class="token string">&#39;group-child&#39;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\nvariants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n        display<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;group-parent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>Would produce CSS like:</p><div class="language-"><pre><code>.group-parent .group-child:block {\n    display: block\n}\n\n.group-parent .group-child:inline-block {\n    display: inline-block\n}\n\n...etc\n</code></pre></div><p>Let&#39;s cover the <code>theme.groupVariants</code> first.</p><p>You can add multiple objects defining the selectors for parent and child selectors. You can also supply a <code>groupPrefix</code> and <code>groupSuffix</code> to add more configuration to the parent selector.</p><div class="language-js"><pre><code>groupVariants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;group-parent&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        groupPrefix<span class="token operator">:</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span>\n        groupSelector<span class="token operator">:</span> <span class="token string">&#39;group-child&#39;</span><span class="token punctuation">,</span>\n        groupSuffix<span class="token operator">:</span> <span class="token string">&#39;:before&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token string">&#39;another-parent&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        groupPrefix<span class="token operator">:</span> <span class="token string">&#39;.some-parent&#39;</span><span class="token punctuation">,</span>\n        groupSelector<span class="token operator">:</span> <span class="token string">&#39;another-child&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>Which would produce:</p><div class="language-"><pre><code>body.group-parent:before .group-child:block {\n    display: block\n}\n\n.some-parent.another-parent .another-child:block {\n    display: block\n}\n...etc\n</code></pre></div><p>The second part is to add the group variant you&#39;ve defined to your <code>variants</code> configuration in order for them to actually used.</p><div class="language-js"><pre><code>variants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n        display<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;group-parent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>Here, we&#39;re enabling all <code>display</code> classes to generate the <code>group-parent</code> group variant we&#39;ve defined.</p><p>There&#39;s plenty of use-cases for this, but let&#39;s explore a few.</p><h2 id="mobile-menu"><a class="header-anchor" href="#mobile-menu" aria-hidden="true">#</a> Mobile Menu</h2><p>A common pattern for a mobile menu is to show a slide-out when clicking on an icon in the header. A great way to handle this is to toggle a class on the <code>&lt;html&gt;</code> element, and then using CSS selectors, change behaviour based on this classes existance.</p><p>In CSS this would be trivial using something like:</p><div class="language-css"><pre><code><span class="token selector">.menu-open</span> <span class="token punctuation">{</span>\n    <span class="token selector">.menu-overlay</span> <span class="token punctuation">{</span>\n        <span class="token atrule"><span class="token rule">@apply</span> opacity-100 visible<span class="token punctuation">;</span></span>\n    <span class="token punctuation">}</span>\n\n    <span class="token selector">.menu-pane</span> <span class="token punctuation">{</span>\n        <span class="token atrule"><span class="token rule">@apply</span> translate-x-0<span class="token punctuation">;</span></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>But this relies on CSS, which we&#39;d rather not do if we can help it, instead relying on utility classes. Not to mention every project might implement a mobile-menu differently - we want a bit more flexibility here.</p><p>Let&#39;s define a custom group variant to handle this.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is already part of our <a href="https://github.com/sgroupdesign/sui-vue/blob/main/packages/tailwind-base/src/index" target="_blank" rel="noopener noreferrer">@sui/tailwind-base</a> package.</p></div><div class="language-js"><pre><code>theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n        groupVariants<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Add a `mobile-nav-open` group variant - `html.mobile-nav-open .mobile-nav-open:*`</span>\n            <span class="token string">&#39;mobile-nav-open&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                groupSelector<span class="token operator">:</span> <span class="token string">&#39;mobile-nav-open&#39;</span><span class="token punctuation">,</span>\n                groupPrefix<span class="token operator">:</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\nvariants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n        opacity<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;mobile-nav-open&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        display<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;mobile-nav-open&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        translate<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;mobile-nav-open&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        visibility<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;mobile-nav-open&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>Here, we&#39;re creating a <code>mobile-nav-open</code> group variant as <strong>both</strong> the parent and child selectors, just for convenience. Putting this into action and combining with our <a href="/components/mobile-nav.html">Mobile Nav</a> component to toggle the class on the body element:</p>',23),v=o("pre",null,[o("code",null,'<div class="flex justify-end items-center bg-white">\n    <button type="button" class="btn rounded-md p-2 text-gray-400" aria-expanded="false" data-mobile-nav-open>\n        <span class="sr-only">Open menu</span>\n        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>\n    </button>\n</div>\n\n<div class="mobile-nav-open:opacity-100 mobile-nav-open:visible fixed inset-0 overflow-hidden opacity-0 invisible transition-all ease-in-out duration-500" role="dialog" aria-modal="true">\n    <div class="absolute inset-0 overflow-hidden">\n        <div class="absolute inset-0 bg-gray-500 bg-opacity-75" aria-hidden="true" data-mobile-nav-close></div>\n\n        <div class="fixed inset-y-0 right-0 max-w-full flex">\n            <div class="mobile-nav-open:translate-x-0 w-screen max-w-md transform translate-x-full transition ease-in-out duration-500">\n                <button class="btn rounded-md p-2 text-gray-400 absolute right-0 mr-8 mt-12" data-mobile-nav-close>\n                    <span class="sr-only">Close panel</span>\n                    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>\n                </button>\n\n                <div class="h-full flex flex-col p-6 bg-white shadow-xl"></div>\n            </div>\n        </div>\n    </div>\n</div>\n')],-1),h=c('<p>Ignoring the fact that we toggle a <code>mobile-menu-open</code> class on the <code>&lt;html&gt;</code> element with JS, we&#39;re using the following to trigger this functionality:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mobile-nav-open:opacity-100 mobile-nav-open:visible ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mobile-nav-open:translate-x-0 ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>Because we have enabled <code>opacity</code>, <code>visibility</code> and <code>translate</code> variants to be able to use <code>mobile-nav-open</code>, we can use any of their utility classes as variants. Loading the page, this would <strong>not</strong> apply any <code>mobile-nav-open:*</code> classes until there&#39;s a <code>html.mobile-nav-open</code> parent class selector.</p><div class="language-html"><div class="highlight-lines"><div class="highlighted"> </div><br><br><br><br><br></div><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mobile-nav-open<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mobile-nav-open:opacity-100 mobile-nav-open:visible ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mobile-nav-open:translate-x-0 ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="accordion"><a class="header-anchor" href="#accordion" aria-hidden="true">#</a> Accordion</h2><p>Similar to the above, you might want to trigger opening of an accordion, when a parent selector (the overall accordion) has a class set.</p><div class="language-js"><pre><code>theme<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n        groupVariants<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Add a `accordion-open` group variant - `.accordion-open .open:*`</span>\n            <span class="token string">&#39;accordion-open&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                groupSelector<span class="token operator">:</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token comment">// Setup our `mobile-nav-open` group variant to be used on a few variants, by default</span>\nvariants<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extend<span class="token operator">:</span> <span class="token punctuation">{</span>\n        display<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;accordion-open&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>Instead of binding to the <code>&lt;html&gt;</code> element but we&#39;re applying to the <code>.accordion</code> element.</p>',8),m=o("pre",null,[o("code",null,'<div class="w-full max-w-md p-2 mx-auto bg-white rounded-2xl">\n    <div>\n        <button class="flex justify-between w-full px-4 py-2 text-sm font-medium text-left text-purple-900 bg-purple-100 rounded-lg hover:bg-purple-200 focus:outline-none focus-visible:ring focus-visible:ring-purple-500 focus-visible:ring-opacity-75" type="button" aria-expanded="true" onclick="parentElement.classList.toggle(\'open\')">\n            <span>What is your refund policy?</span>\n            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="transform rotate-180 w-5 h-5 text-purple-500"><path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>\n        </button>\n\n        <div class="hidden accordion-open:block px-4 pt-4 pb-2 text-sm text-gray-500">If you\'re unhappy with your purchase for any reason, email us within 90 days and we\'ll refund you in full, no questions asked.</div>\n    </div>\n\n    <div class="mt-2">\n        <button class="flex justify-between w-full px-4 py-2 text-sm font-medium text-left text-purple-900 bg-purple-100 rounded-lg hover:bg-purple-200 focus:outline-none focus-visible:ring focus-visible:ring-purple-500 focus-visible:ring-opacity-75" type="button" aria-expanded="true" onclick="parentElement.classList.toggle(\'open\')">\n            <span>Do you offer technical support?</span>\n            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="transform rotate-180 w-5 h-5 text-purple-500"><path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>\n        </button>\n\n        <div class="hidden accordion-open:block px-4 pt-4 pb-2 text-sm text-gray-500">No.</div>\n    </div>\n</div>\n')],-1),b=c('<p>Ignoring the fact that we toggle a <code>open</code> class on the <code>&lt;div&gt;</code> element with JS, we&#39;re using the following to trigger this functionality:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">parentElement<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden accordion-open:block ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>Because we have enabled <code>opacity</code>, <code>visibility</code> and <code>translate</code> variants to be able to use <code>mobile-nav-open</code>, we can use any of their utility classes as variants. Loading the page, this would <strong>not</strong> apply any <code>mobile-nav-open:*</code> classes until there&#39;s a <code>html.mobile-nav-open</code> parent class selector.</p><div class="language-html"><div class="highlight-lines"><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>open<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">parentElement<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden accordion-open:block ...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>Because we have enabled <code>display</code> variants to be able to use <code>accordion-open</code>, we can use any of their utility classes as variants. Loading the page, this would <strong>not</strong> apply any <code>accordion-open:*</code> classes until there&#39;s a <code>.open</code> parent class selector.</p>',5);i.render=function(o,p,c,l,i,f){const y=n("code-preview");return a(),s("div",null,[u,r,d,t(y,{"body-id":"breakpoint-example",heading:"Group-hover example"},{default:e((()=>[k])),_:1}),g,t(y,{"body-id":"mobile-menu-example",heading:"Mobile menu example"},{default:e((()=>[v])),_:1}),h,t(y,{heading:"Accordion example"},{default:e((()=>[m])),_:1}),b])};export{l as __pageData,i as default};
