import{r as a,o as s,c as t,d as n,w as e,a as o,b as p}from"./app.60fc63aa.js";const c='{"title":"Docs Build","description":"","frontmatter":{},"headers":[{"level":2,"title":"Getting started","slug":"getting-started"},{"level":2,"title":"SUI Framework","slug":"sui-framework"},{"level":3,"title":"How it works","slug":"how-it-works"},{"level":3,"title":"Rebuilding","slug":"rebuilding"}],"relativePath":"getting-started/installation-docs.md","lastUpdated":1628671448460}',l={},i=o('<h1>Docs Build</h1><p>These docs use <a href="https://vitepress.vuejs.org" target="_blank" rel="noopener noreferrer">VitePress</a>, which offers crazy-fast ‚ö°Ô∏è development, and bundles all this documentation into a static site. All documenation is written in Markdown files (in <code>docs</code>), which is then converted to a static site for deployment.</p><p>This guide will cover how to edit these docs. These steps are <strong>not</strong> required for using S.UI in your web projects.</p><h2 id="getting-started"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h2><p>Clone the <a href="https://github.com/sgroupdesign/sui-vue" target="_blank" rel="noopener noreferrer">sui-vue</a> repository to your computer, open a terminal in the root of this folder and run:</p><div class="language-sh"><pre><code>npm install\n</code></pre></div><p>And wait for the install to complete. Once installed, there are a number of different scripts available:</p><ul><li><code>docs:dev</code> - Starts the Vite HMR dev server and listens to changes in Markdown files. Most commonly used.</li><li><code>docs:build</code> - Creates a full production build, generating a static site in <code>docs/.vitepress/dist</code>, ready to be deployed.</li><li><code>docs:serve</code> - Creates a local server for you to browser the resulting build from <code>docs:build</code>.</li></ul><p>You can run any of these by prefixing <code>npm run *</code>.</p><div class="language-sh"><pre><code>npm run docs:dev\n</code></pre></div><p>This will start up the Vite dev server, with HMR to any of your changes appear instantly. Head to <code>http://localhost:3000/</code> to browse these docs, and away you go!</p><h2 id="sui-framework"><a class="header-anchor" href="#sui-framework" aria-hidden="true">#</a> SUI Framework</h2><p>VitePress allows you to include custom Vue components in pages. We use this to create a &quot;code preview&quot; component, which when supplied with HTML code will show a preview of the rendered result, and tabs to toggle between the code. You can also use the handle to the right to resize the frame for testing responsive breakpoints. It&#39;ll even allow you to copy all the code with one click! üò±</p><p>It looks a little something like this:</p>',14),r=p("pre",null,[p("code",null,'<div class="rounded-md bg-green-50 p-4">\n    <div class="flex">\n        <div class="flex-shrink-0">\n            <svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>\n        </div>\n\n        <div class="ml-3">\n            <p class="text-sm font-medium text-green-800">Successfully demonstrated how amazing this is üòé</p>\n        </div>\n    </div>\n</div>\n')],-1),u=o('<h3 id="how-it-works"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How it works</h3><p>Let&#39;s get down to business. This works by providing the raw HTML as a <code>&lt;slot&gt;</code> to the Vue component. This is the rendered in an <code>iframe</code> element, so that it&#39;s isolated from the rest of VitePress, and we can properly demonstrate full-page components like a slide-over, or mobile menu. We use the <code>srcdoc</code> attribute for this.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code-preview</span> <span class="token attr-name">heading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A heading for this component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    This will be rendered as the preview, and shown as code.\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code-preview</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>However in order for the resulting code to not only look correct using Tailwind + our S.UI framework CSS, it needs to use the Headless UI + S.UI JS components as well. We need to import both these things into the iframe to get an accurate &quot;playground&quot; of how things will look and act on a real site.</p><p>The actual body of the iframe (what we pass into the <code>srcdoc</code> attribute) looks something like this:</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/style.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/components.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/iframe.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>antialiased font-sans bg-gray-200 overflow-hidden<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo-app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-white<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-4xl mx-auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n                <span class="token comment">&lt;!-- Slot content goes here --&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>Apart from a little Tailwind goodness to wrap the slots&#39; provided code, we&#39;re importing 3 things, <code>style.css</code>, <code>components.js</code> and <code>iframe.js</code>. We use <code>iframe.js</code> to listen to when content has been rendered in the <code>iframe</code> and adjust the height of it automatically - something and <code>iframe</code> doesn&#39;t do. The other two are the CSS and JS that would be normally part of our <code>base-craft</code> project, but need to be included in the iframe for &quot;real&quot; results.</p><p>In order for this to happen, we have a nested module in <code>docs/sui</code> that is another Vite project, that compiles CSS/JS and adds them to VitePress&#39; <code>public</code> folder as static assets, which are included in each <code>iframe</code> document. Just like the S.UI framework used on a project, we use Tailwind and JIT processing to keep this lean and fast.</p><p>The <code>sui/src/components.js</code> file is very simple, pulling in all <code>@sui</code> JS components, and the S.UI CSS (which includes Tailwind), in almost the exact same manner as we would for a web project.</p><h3 id="rebuilding"><a class="header-anchor" href="#rebuilding" aria-hidden="true">#</a> Rebuilding</h3><p>One critical point is that due to Tailwind&#39;s purge, we&#39;ll periodically need to rebuild the CSS used in <code>iframe</code>&#39;s, as we add new examples. Similarly, when we add new <code>@sui</code> JS components, we&#39;ll always want them available to code preview&#39;s. In order for this to happen, we need to rebuild the &quot;S.UI framework&quot; for these components to use.</p><p>Fortunately, this is straightforward with the following <code>npm</code> commands:</p><ul><li><code>docs:sui-build</code>: Creates the built files in <code>docs/public</code>.</li><li><code>docs:sui-watch</code>: Creates the built files in <code>docs/public</code> and watches for any changes to <code>docs/sui/src/*</code> files.</li><li><code>docs:watch</code>: Runs <code>docs:sui-watch</code> watching changes, then <code>docs:dev</code> to start the dev server for VitePress.</li></ul><p>You&#39;ll find yourself commonly going for the <code>docs:watch</code> option which is the best of both worlds.</p><div class="language-sh"><pre><code>npm run docs:watch\n</code></pre></div><p>Using the <code>watch</code> command, the secondary Vite process (which is building the S.UI CSS/JS) will watch for any changes you make to the Markdown files, and re-compile automatically, ensuring it scans all files to purge (or include) appropriate CSS. This will also be the case for when you want to include any <code>@sui</code> JS components.</p><h4 id="setting-the-base-craft-path"><a class="header-anchor" href="#setting-the-base-craft-path" aria-hidden="true">#</a> Setting the <code>base-craft</code> path</h4><p>In order for this to work, we need to reference the <code>craft-base</code> repository. This is so we&#39;re not duplicating our CSS and Tailwind config for the docs. Ideally, you could set this with <code>.env</code> variables, but that&#39;s not possible with ES6 importing.</p><p>Instead, we have hard-coded the path <code>../base-craft3-vite</code> relative to <strong>this</strong> project root. If you do not have the <code>base-craft</code> repository cloned here, you can use a symlink (alias) to create this directory that points to wherever you cloned it.</p>',19);l.render=function(o,p,c,l,d,h){const k=a("code-preview");return s(),t("div",null,[i,n(k,{heading:"An example of code preview"},{default:e((()=>[r])),_:1}),u])};export{c as __pageData,l as default};
