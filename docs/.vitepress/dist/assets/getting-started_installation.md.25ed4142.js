import{o as n,c as a,a as s}from"./app.a3b816ba.js";const t='{"title":"Installation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Getting started","slug":"getting-started"},{"level":2,"title":"Difference to Webpack / Laravel Mix","slug":"difference-to-webpack-laravel-mix"}],"relativePath":"getting-started/installation.md","lastUpdated":1628912195973}',e={},p=[s('<h1>Installation</h1><p>The build process for S.UI projects uses <a href="https://vitejs.dev" target="_blank" rel="noopener noreferrer">Vite</a> as a super-fast ‚ö°Ô∏è development server, with hot module reloading (HMR) making changes to your Twig, JS and CSS almost instant, and without refreshing the page.</p><h2 id="getting-started"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h2><p>Clone the <a href="https://github.com/sgroupdesign/base-craft3" target="_blank" rel="noopener noreferrer">base-craft</a> repository to your computer, open a terminal in the root of this folder and run:</p><div class="language-sh"><pre><code>npm install\n</code></pre></div><p>And wait for the install to complete. Once installed, there are a number of different scripts available:</p><ul><li><code>dev</code> - Starts the Vite HMR dev server and listens to changes for files. Most commonly used.</li><li><code>build</code> - Creates a full production build, copying assets, and compiling CSS/JS, ready to be deployed.</li><li><code>watch</code> - Runs a <code>build</code> process, and watches files for changes. Otherwise the &quot;traditional&quot; approach like Webpack or Laravel Mix.</li></ul><p>You can run any of these by prefixing <code>npm run *</code>.</p><div class="language-sh"><pre><code>npm run dev\n</code></pre></div><p>Once run, you can make your CSS/JS changes until you make something amazing üéâ.</p><h2 id="difference-to-webpack-laravel-mix"><a class="header-anchor" href="#difference-to-webpack-laravel-mix" aria-hidden="true">#</a> Difference to Webpack / Laravel Mix</h2><p>There&#39;s a difference in behaviour with Vite compared to Laravel Mix in that we&#39;re using HMR to do our development, which makes things very quick. As such, there&#39;s no longer a task watching process listening to changes on files and compiling/parsing them. While this was convenient, this was in practice slow.</p><h4 id="required-scripts"><a class="header-anchor" href="#required-scripts" aria-hidden="true">#</a> Required scripts</h4><p>During development, all CSS and JS is served via JS modules, which lends to its speed - not needing to bundle everything for dev. We use the <a href="https://nystudio107.com/docs/vite/" target="_blank" rel="noopener noreferrer">Craft Vite</a> plugin to handle everything.</p><div class="language-twig"><pre><code><span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span> <span class="token property">craft</span><span class="token punctuation">.</span><span class="token property">vite</span><span class="token punctuation">.</span><span class="token property">script</span><span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>js/main.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token rd"><span class="token punctuation">}}</span></span></span>\n</code></pre></div><p>The above in the sole file we need to include on the page. During development, this will load <code>js/main.js</code>, which being a JS module, will lazy-load in all other assets - including the CSS!</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/js/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>When running <code>build</code> this will be swapped out to normal includes, and not relying on JS modules (which aren&#39;t cross-browser compatible - yet!).</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/dist/main.56c9ea9d.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/dist/style.c30f6458.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h4 id="where-are-my-styles"><a class="header-anchor" href="#where-are-my-styles" aria-hidden="true">#</a> Where are my styles?</h4><p>If you find yourself looking at a blank page, or your changes have been lost once you&#39;ve stopped the dev server - don&#39;t fret! You&#39;ll need to run <code>npm run build</code> to take your changes you&#39;ve been making, and make them production-ready.</p><h4 id="you-need-to-use-npm-run-build"><a class="header-anchor" href="#you-need-to-use-npm-run-build" aria-hidden="true">#</a> You need to use <code>npm run build</code></h4><p>In the past, you could&#39;ve gotten away with deploying un-minified code (non-production or non-built) code, that&#39;s no longer the case. Instead, you&#39;ll need to <code>build</code> every time you want to deploy CSS/JS changes to a server. This is however in good practice, as during staging development, you&#39;ll be dealing with &quot;production-ready&quot; assets, so you&#39;ll be able to identify any issues immediately. This is in contrast to dealing with them at the final production step when you&#39;re under the pump üò¨.</p><h4 id="legacy-support"><a class="header-anchor" href="#legacy-support" aria-hidden="true">#</a> Legacy support</h4><p>Vite will create multiple JS files, depending on what browsers we target. The appropriate bundle will be served, depending on the end user&#39;s browser. This is great news in that we can keep a modern JS build lean, without having to add polyfills for older browsers.</p><p>You also don&#39;t need to worry about serving up the correct one, as the Craft Vite plugin will sort it out.</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span>document<span class="token punctuation">,</span>t<span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&quot;noModule&quot;</span><span class="token keyword">in</span> t<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;onbeforeload&quot;</span><span class="token keyword">in</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;beforeload&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token operator">===</span>t<span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;nomodule&quot;</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span>n<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nomodule<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/dist/polyfills-legacy.8fce4e35.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/dist/main.56c9ea9d.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nomodule<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/dist/main-legacy.0c84e934.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/dist/style.c30f6458.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>The above adds a <code>polyfill</code> and <code>main-legacy</code> JS file, which are only loaded for legacy browsers.</p>',28)];e.render=function(s,t,e,o,c,l){return n(),a("div",null,p)};export{t as __pageData,e as default};
