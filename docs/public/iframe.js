(() => { function e(e, r) { return function(e) { if (Array.isArray(e)) { return e; } }(e) || function(e, t) { let r = e == null ? null : typeof Symbol != 'undefined' && e[Symbol.iterator] || e['@@iterator']; if (r == null) { return; } let n, o, i = [], a = !0, u = !1; try { for (r = r.call(e); !(a = (n = r.next()).done) && (i.push(n.value), !t || i.length !== t); a = !0) { } } catch (e) { u = !0, o = e; } finally { try { a || r.return == null || r.return(); } finally { if (u) { throw o; } } } return i; }(e, r) || function(e, r) { if (!e) { return; } if (typeof e == 'string') { return t(e, r); } let n = Object.prototype.toString.call(e).slice(8, -1); n === 'Object' && e.constructor && (n = e.constructor.name); if (n === 'Map' || n === 'Set') { return Array.from(e); } if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) { return t(e, r); } }(e, r) || function() { throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'); }(); } function t(e, t) { (t == null || t > e.length) && (t = e.length); for (var r = 0, n = new Array(t); r < t; r++) { n[r] = e[r]; } return n; } if (document.addEventListener('click', ((e) => { for (let t = e.target; t;) { if (t.tagName === 'A' && t.getAttribute('href') === '#') { return void e.preventDefault(); } t = t.parentElement; } })), document.addEventListener('submit', ((e) => { e.preventDefault(); })), 'ResizeObserver' in window) { n(); } else { const r = document.createElement('script'); r.onload = function() { window.ResizeObserver = window.ResizeObserver.ResizeObserver, n(); }, r.src = 'https://unpkg.com/@juggle/resize-observer@3.3.0/lib/exports/resize-observer.umd.js', document.head.appendChild(r); } function n() { new window.ResizeObserver(((t) => { let r, n = e(t, 1)[0]; n.contentBoxSize ? r = (Array.isArray(n.contentBoxSize) ? n.contentBoxSize[0] : n.contentBoxSize).blockSize : r = n.contentRect.height; r !== window.bodyHeight && r > 0 && (window.bodyHeight = r, window.parent.postMessage({ type: 'BODY_HEIGHT', name: window.name, height: r })); })).observe(document.body); } })();


